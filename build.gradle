/*
 * Copyright 2013 David Tinker
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'groovy'
apply from: file("etc/emma.gradle")

group = 'io.qdb'
version = '0.1.0-SNAPSHOT'
mainClassName = 'io.qdb.server.Main'

repositories {
    mavenCentral()
    maven {
        url "/Users/david/.m2/repository"
    }
}

dependencies {
    compile 'io.qdb:qdb-buffer:0.3.0-SNAPSHOT'
    compile 'io.qdb:qdb-kvstore:0.1.0-SNAPSHOT'
    compile 'org.simpleframework:simple:4.1.21'
    compile 'com.google.inject:guice:3.0'
    compile 'ch.qos.logback:logback-core:1.0.7'
    compile 'ch.qos.logback:logback-classic:1.0.7'
    compile 'org.slf4j:slf4j-api:1.6.6'
    compile 'com.typesafe:config:1.0.0'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.1.2'
    compile 'com.google.guava:guava:13.0.1'
    compile 'com.rabbitmq:amqp-client:3.1.0'

    testCompile "org.codehaus.groovy:groovy-all:1.8.6"
    testCompile "org.spockframework:spock-core:0.6-groovy-1.8"
    testCompile 'junit:junit:4.10'
    testCompile 'commons-io:commons-io:2.4'
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourceJar
}

tasks.withType(Tar) {
    compression = Compression.GZIP
}

tasks.run.systemProperties.qdbLogLevel = "DEBUG"

task("run-debug", dependsOn: 'classes', type: JavaExec) {
    main = "io.qdb.server.Main"
    classpath = sourceSets.main.runtimeClasspath
    systemProperties.qdbLogLevel = "DEBUG"
    jvmArgs = ["-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"]
}

// create .deb package - needs fpm installed (gem install fpm)
task deb(dependsOn: 'distTar') << {
    delete {
        file 'build/debian'
    }
    copy {
        from tarTree("build/distributions/${project.name}-${version}.tgz")
        into 'build/debian/var/lib'
    }
    new File("build/debian/var/lib/${project.name}-${version}").renameTo("build/debian/var/lib/qdb")
    delete {
        file 'build/debian/var/lib/qdb/bin/qdb-server.bat'
    }
    copy {
        from fileTree("src/linux/etc/")
        into 'build/debian/etc'
    }
    copy {
        from file("src/linux/debian")
        into 'build/debian/etc/init.d/'
        include('init.sh')
        rename ('init.sh', 'qdb')
    }
    copy {
        from file("src/linux/debian/default")
        into 'build/debian/etc/default'
        rename ('default', 'qdb')
    }
    def fpm = ("fpm -s dir -t deb -n qdb -v ${version} -a noarch " +
            "-d openjdk-7-jdk -d adduser " +
            "--config-files /etc/qdb.properties " +
            "--config-files /etc/default/qdb " +
            "--after-install src/linux/debian/postinst " +
            "--before-remove src/linux/debian/prerm " +
            "--deb-user root --deb-group root " +
            "-f -p build/qdb_${version}_all.deb " +
            "-C build/debian/ " +
            "--description").split(" ") as List
    fpm.add "QDB persistent message queues with replay"
    fpm.add "."
    exec {
        commandLine fpm
    }
}
